@page "/DigitalGarden/{*MarkdownFilePath}"
@inject HttpClient HttpClient

<PageTitle>@_pageTitle</PageTitle>

<RadzenMarkdown 
    class="rz-p-0 rz-p-md-12" 
    AutoLinkHeadingDepth="6" 
    Text="@_markdownFileContent"
    AllowHtml=true
    AllowedHtmlTags=@allowedHtmlTags
/>

@code {
    [Parameter] public required string MarkdownFilePath { get; set; }
    List<string> _allowedHtmlTags = new List<string>();

    private string _pageTitle = string.Empty;
    private string _markdownFileContent = string.Empty;
    private readonly string _digitalGardenRootDirectory = "DigitalGarden";
    private readonly string[] allowedHtmlTags = new[]
    {
        "a","b","blockquote","br","code","div","em","h1","h2","h3","h4","h5","h6",
        "hr","i","img","li","ol","p","pre","strong","ul",
        "table","thead","tbody","tr","td","th",
        "span","section","sup","sub", "embed","iframe"
    };

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            MarkdownFilePath = MarkdownFilePath.EndsWith(".md", StringComparison.OrdinalIgnoreCase)
                ? MarkdownFilePath
                : $"{MarkdownFilePath}.md";

            _pageTitle = Path.GetFileNameWithoutExtension(MarkdownFilePath);

            _markdownFileContent = await HttpClient.GetStringAsync(
                $"{_digitalGardenRootDirectory}/{MarkdownFilePath}"
            );
        } catch (Exception) {}
    }
}