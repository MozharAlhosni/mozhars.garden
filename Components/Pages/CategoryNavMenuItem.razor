@using System.Text.RegularExpressions

<RadzenPanelMenuItem 
    Text=@NestedMarkdownPosts.Key 
    Icon="folder"
    Style=@GetCategoryMenuItemStyle()>

    @if (_standaloneMarkdownPosts.Any())
    {
        foreach (string standaloneMarkdownPost in _standaloneMarkdownPosts)
        {
            <MarkdownPostNavMenuItem 
                MarkdownFilePath=@($"{PreviousApexCategory}{NestedMarkdownPosts.Key}/{standaloneMarkdownPost}")
                IsNestedMenuItem=true 
            />
        }
    }
    @if (_nestedMarkdownPosts.Any())
    {
        foreach (KeyValuePair<string, List<string>> nestedMarkdownPost in _nestedMarkdownPosts)
        {
            <CategoryNavMenuItem 
                NestedMarkdownPosts=@nestedMarkdownPost
                IsNestedCategoryMenuItem=true
                PreviousApexCategory=@($"{PreviousApexCategory}{NestedMarkdownPosts.Key}/")
            />
        }
    }
</RadzenPanelMenuItem>

@code {
    [Parameter] public required KeyValuePair<string, List<string>> NestedMarkdownPosts { get; set; }
    [Parameter] public bool IsNestedCategoryMenuItem { get; set; } = false;
    [Parameter] public string PreviousApexCategory { get; set; } = string.Empty;

    private HashSet<string> _standaloneMarkdownPosts = new();
    private Dictionary<string, List<string>> _nestedMarkdownPosts = new();

    protected override void OnParametersSet() => ProcessMarkdownPosts();

    private void ProcessMarkdownPosts()
    {
        try
        {
            _standaloneMarkdownPosts = NestedMarkdownPosts.Value?
                .Select(path => path.Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                .Where(segments => segments.Length >= 2 && segments[1].EndsWith(".md", StringComparison.OrdinalIgnoreCase))
                .Select(segments => Path.GetFileNameWithoutExtension(segments[1]))
                .ToHashSet()
                ?? new();

            List<string>? NestedMarkdownPostsStandalonesRemoved = NestedMarkdownPosts.Value?
                .Where(path => !_standaloneMarkdownPosts.Contains(Path.GetFileNameWithoutExtension(path)))
                .ToList();

            List<string>? apexCategoryRemovedPaths = NestedMarkdownPostsStandalonesRemoved?
                .Select(p => p.Replace($"{NestedMarkdownPosts.Key}/", ""))
                .ToList()
                ?? new();

            int indexToSplitAt = 0;
            _nestedMarkdownPosts = apexCategoryRemovedPaths
                .Where(path => path.Contains('/'))
                .GroupBy(
                    path => path.Split('/')[indexToSplitAt],
                    path => path
                )
                .ToDictionary(
                    group => group.Key,
                    group => group.ToList()
                );
        } catch (Exception) {}
    }

    private string GetCategoryMenuItemStyle()
    {
        string style = "overflow-wrap:anywhere;";

        if (IsNestedCategoryMenuItem)
            style += "margin-left:10px;";

        return style;
    }
}